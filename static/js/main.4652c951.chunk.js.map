{"version":3,"sources":["Componentes/vista-reproductor.jsx","Componentes/data-reproductor.jsx","App.js","serviceWorker.js","index.js","img/imagen.jpg"],"names":["Artist","props","element","artist","songs","useState","seeker","setSeeker","key","className","type","onChange","e","target","value","placeholder","onClick","event","buscar","src","img","alt","btnPreview","btnNext","map","song","i","name","id","likes","nolikes","disabled","like","ReproductorMusica","setSongs","index","setIndex","useEffect","fetch","then","res","json","result","Promise","all","artists","doc","artista","data","dataLabSongs","elem","toptracks","track","filter","elemSong","rank","playcount","url","sort","a","b","response","preventDefault","array","concat","next","length","preview","handleLike","songsCopi","notLike","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.4652c951.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport img from '../img/imagen.jpg';\nimport '../App.css';\n\nconst Artist = (props) => {\n    const { artist, songs } = props.element;\n\n\n    const [seeker, setSeeker] = useState('');\n\n\n\n    const searchArtist = (e) => {\n        setSeeker(e.target.value);\n    };\n\n\n    return (\n\n        <div key={artist} className=\"d-flex justify-content-center\">\n            <div className=\"\">\n                <div className=\"row m-2 justify-content-center\">\n                    <input className=\"form-control col-sm-9 \" type=\"text\" onChange={searchArtist} placeholder=\"Nombre Artista\" />\n                    <button className=\"btn btn-outline-danger col-sm-2 ml-3 mb-3\" onClick={(event) => { props.buscar(event, seeker) }} type=\"submit\"><i className=\"fas fa-search\"></i></button>\n\n                </div>\n                <div className=\"card style\">\n                    <img className=\"card-img-top\" src={img} alt='artista' />\n                    <div className=\"card-body \" >\n                        <div className=\"row justify-content-center\">\n                            <button type=\"button\" className=\"btnColorTrash\" onClick={(e) => { props.btnPreview(e) }}>\n                                <i className=\"fas fa-arrow-left text-white\"></i>\n                            </button>\n                            <h3 className=\"text-white text-center col-sm-7\">{artist}</h3>\n                            <button\n                                type=\"button\"\n                                className=\"btnColorTrash\"\n                                onClick={(e) => {\n                                    props.btnNext(e)\n                                }}>\n                                <i className=\"fas fa-arrow-right text-white\"></i></button>\n                        </div>\n                        <div className=\"\">\n                            {songs.map((song, i) =>\n                                <div className=\"row\" key={i} >\n                                    <p className=\"col-sm-6 text-white\">{song.name}</p>\n                                    <button\n                                        id={i}\n                                        type=\"button\"\n                                        className=\"btn btnColorTrash col-sm-1 \"\n                                        onClick={(e) => {\n                                            props.likes(e, i)\n                                        }}>\n                                        <i className=\"fas fa-heart text-white\"></i>\n                                    </button>\n                                    <button\n                                        id={i}\n                                        type=\"button\"\n                                        className=\"btnColorTrash col-sm-1\"\n                                        onClick={(e) => {\n                                            props.nolikes(e, i)\n                                        }}>\n                                        <i className=\"fas fa-thumbs-down text-white \"></i>\n                                    </button>\n                                    <button type=\"button\" className=\"btnColorTrash col-sm-4 text-white\" disabled>{song.like}</button>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div >\n    )\n}\n\n\nexport default Artist\n","import React, { useState, useEffect } from 'react';\nimport Artist from './vista-reproductor';\nimport '../App.css';\n\nconst ReproductorMusica = () => {\n\n    const [songs, setSongs] = useState([]);\n    const [index, setIndex] = useState(0);\n\n    const apiArtist = 'https://ws.audioscrobbler.com/2.0/?method=chart.gettopartists&api_key=b71047678120f5300ebf4a390e4b3ef1&format=json';\n    useEffect(() => {\n        fetch(apiArtist).then(res => res.json())\n            .then(result => {\n                Promise.all(result.artists.artist.map(doc => {\n                    return artista(doc.name)\n                })).then(data => {\n                    // console.log(data);\n                    const dataLabSongs = data.map((elem, i) => {\n                        //    console.log(elem.toptracks.track)\n                        return {\n                            artist: result.artists.artist[i].name,\n                            songs: elem.toptracks.track\n                                .filter(elemSong => elemSong['@attr'].rank <= 10)\n                                .map(elemSong => { return { name: elemSong.name, like: elemSong.playcount, url: elemSong.url } })\n                                .sort((a, b) => b.like - a.like)\n                        }\n                    })\n                    setSongs(dataLabSongs)\n\n                })\n            })\n    }, [])\n\n\n    const artista = (artist) => {\n\n        return fetch(`https://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist=${artist}&api_key=5c8e2c09c2a2396e6d24a126d15464fc&format=json`)\n            .then(response => response.json())\n    }\n\n    const seeker = (event, artists) => {\n        event.preventDefault();\n        artista(artists).then(data => {\n\n            const obj = {\n                artist: data.toptracks['@attr'].artist,\n                songs: data.toptracks.track\n                    .filter(elemSong => elemSong['@attr'].rank <= 10)\n                    .map(elemSong => { return { name: elemSong.name, like: elemSong.playcount, url: elemSong.url } })\n                    .sort((a, b) => b.like - a.like)\n            }\n            const newArray = [obj];\n            const array = newArray.concat(songs)\n            setSongs(array)\n        })\n\n    }\n\n\n\n    const next = (e) => {\n        e.preventDefault()\n        index === songs.length - 1 ? setIndex(0) : setIndex(index + 1);\n    }\n\n    const preview = (e) => {\n        e.preventDefault()\n        index === 0 ? setIndex(songs.length - 1) : setIndex(index - 1);\n    }\n\n\n    const handleLike = (e, id) => {\n        e.preventDefault()\n        const songsCopi = [...songs];\n        songsCopi[index].songs[id].like++;\n        setSongs(songsCopi)\n        // console.log(songs);\n    }\n\n    const notLike = (e, id) => {\n        e.preventDefault()\n        const songsCopi = [...songs];\n        songsCopi[index].songs[id].like--;\n        setSongs(songsCopi)\n        // console.log(songs);\n    }\n\n\n    const a = songs.map((elem, i) =>\n        < div className=\"fondito\" key={i} >\n            <Artist element={elem} btnNext={next} btnPreview={preview} likes={handleLike} buscar={seeker} nolikes={notLike} />\n        </div >\n    )[index]\n\n    return (\n        <div className=\"m-5\">\n            {a}\n        </div>\n    )\n}\n\nexport default ReproductorMusica;\n\n\n","import React from \"react\";\nimport ReproductorMusica from \"./Componentes/data-reproductor\";\n\nconst App = () => {\n  return (\n    <div>\n      <ReproductorMusica />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/imagen.cc590710.jpg\";"],"sourceRoot":""}